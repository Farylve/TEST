name: Deployment Workflow

# Trigger this workflow on pushes to the specified branch
on:
    push:
        branches:
            - main

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "22"
                  cache: "npm"
                  cache-dependency-path: |
                      client/package-lock.json
                      server/package-lock.json

            - name: Cache builds
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.npm
                      ${{ github.workspace }}/client/.next/cache
                      ${{ github.workspace }}/server/dist
                  key: ${{ runner.os }}-builds-${{ hashFiles('client/package-lock.json', 'server/package-lock.json') }}-${{ hashFiles('client/**/*.js', 'client/**/*.jsx', 'client/**/*.ts', 'client/**/*.tsx', 'server/**/*.ts') }}
                  restore-keys: |
                      ${{ runner.os }}-builds-${{ hashFiles('client/package-lock.json', 'server/package-lock.json') }}-
                      ${{ runner.os }}-builds-

            - name: Install client dependencies
              run: |
                  cd client
                  npm ci

            - name: Build Next.js app
              run: |
                  cd client
                  npm run build

            - name: Install server dependencies
              run: |
                  cd server
                  npm ci

            - name: Build server app
              run: |
                  cd server
                  npm run build

            - name: SSH Deploy
              # Use the 'appleboy/ssh-action' action for SSH deployment
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.HOST }} # Your server's IP address
                  username: ${{ secrets.USERNAME }} # Your server's username
                  key: ${{ secrets.SSH_PRIVATE_KEY }} # Your server's SSH private key
                  passphrase: ${{ secrets.SSH_PASSPHRASE }}
                  script: |
                      cd /var/www/nextjs # Specify the path to your app directory on the server
                      git stash push -m "Deploy stash" || true # Stash all local changes to avoid conflicts
                      git pull
                      ls -la # Debug: show directory contents
                      # Deploy client
                      if [ -d "client" ]; then
                          cd client
                          npm install
                          npm run build
                          pm2 delete nextjs 2>/dev/null || echo "No existing nextjs process found"
                          pm2 start ecosystem.config.js
                          cd ..
                      else
                          echo "Error: client directory not found in $(pwd)"
                          exit 1
                      fi
                      
                      # Deploy server
                       if [ -d "server" ]; then
                           cd server
                           # Create .env file for production
                           cat > .env << EOF
                       NODE_ENV=production
                       PORT=3001
                       DATABASE_URL=${{ secrets.DATABASE_URL }}
                       JWT_SECRET=${{ secrets.JWT_SECRET }}
                       JWT_EXPIRES_IN=7d
                       JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
                       JWT_REFRESH_EXPIRES_IN=30d
                       CLIENT_URL=${{ secrets.CLIENT_URL }}
                       ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}
                       BCRYPT_ROUNDS=12
                       SESSION_SECRET=${{ secrets.SESSION_SECRET }}
                       LOG_LEVEL=info
                       EOF
                           npm install
                           npm run build
                           pm2 delete portfolio-server 2>/dev/null || echo "No existing portfolio-server process found"
                           pm2 start ecosystem.config.js
                           cd ..
                       else
                           echo "Error: server directory not found in $(pwd)"
                           exit 1
                       fi
                      
                      pm2 status # Check all processes status
                      pm2 save # Save the PM2 process list