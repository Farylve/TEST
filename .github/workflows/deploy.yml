name: Deploy to Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub (optional)
      if: github.event_name == 'push' && env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != ''
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and test
      run: |
        docker compose -f docker-compose.yml build
        docker compose -f docker-compose.yml up -d
        sleep 30
        # Test backend health
        curl -f http://localhost:5000/api/health || exit 1
        # Test frontend
        curl -f http://localhost:3000 || exit 1
        docker compose -f docker-compose.yml down

    - name: Deploy to server
      if: github.event_name == 'push'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        port: ${{ secrets.PORT || 22 }}
        script: |
          echo "Checking Docker installation..."
          docker --version || { echo "Docker not found!"; exit 1; }
          docker compose version || { echo "Docker Compose not found!"; exit 1; }
          
          # Create project directory if it doesn't exist
          PROJECT_DIR="${{ secrets.SERVER_PATH || '/opt/portfolio' }}"
          echo "Setting up project directory: $PROJECT_DIR"
          sudo mkdir -p "$PROJECT_DIR"
          cd "$PROJECT_DIR"
          
          # Clone or update repository
          if [ -d ".git" ]; then
            echo "Updating existing repository..."
            git fetch origin
            git reset --hard origin/main
          else
            echo "Cloning repository..."
            git clone ${{ github.server_url }}/${{ github.repository }} .
          fi
          
          echo "Stopping existing containers..."
          docker compose -f docker-compose.prod.yml down || true
          
          echo "Building new images..."
          docker compose -f docker-compose.prod.yml build --no-cache
          
          echo "Starting containers..."
          docker compose -f docker-compose.prod.yml up -d
          
          echo "Waiting for containers to initialize..."
          sleep 30
          
          echo "Checking container status..."
          docker compose -f docker-compose.prod.yml ps
          
          echo "Cleaning up unused Docker resources..."
          docker system prune -f

    - name: Health check after deployment
      if: github.event_name == 'push'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        port: ${{ secrets.PORT || 22 }}
        script: |
          PROJECT_DIR="${{ secrets.SERVER_PATH || '/opt/portfolio' }}"
          cd "$PROJECT_DIR"
          
          echo "Waiting for containers to start..."
          sleep 60
          
          echo "Checking container status..."
          docker compose -f docker-compose.prod.yml ps
          
          echo "Checking if backend container is healthy..."
          for i in {1..10}; do
            if docker compose -f docker-compose.prod.yml ps --filter "status=running" | grep portfolio-backend-prod; then
              echo "Backend container is running, testing health endpoint..."
              if curl -f http://localhost:5000/api/health; then
                echo "Health check passed!"
                break
              else
                echo "Health check failed, attempt $i/10"
              fi
            else
              echo "Backend container not running yet, attempt $i/10"
            fi
            sleep 10
          done
          
          # Final health check
          curl -f http://localhost:5000/api/health || {
            echo "Final health check failed. Container logs:"
            docker compose -f docker-compose.prod.yml logs backend
            exit 1
          }
          
          echo "Deployment successful!"