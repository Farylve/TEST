# Docker Compose конфигурация для продакшн развертывания портфолио приложения

services:
  # Backend сервис (Node.js/Express API)
  backend:
    build:
      context: ./back  # Путь к Dockerfile бэкенда
    environment:
      # Переменные окружения для продакшн режима
      - NODE_ENV=production
      - PORT=5000  # Порт для Express сервера
      - DATABASE_URL=postgresql://portfolio_user:portfolio_pass@postgres:5432/portfolio  # Строка подключения к БД
    depends_on:
      postgres:
        condition: service_healthy  # Ждем пока PostgreSQL станет доступен
    restart: unless-stopped  # Автоматический перезапуск при падении
    networks:
      - app  # Подключение к внутренней сети

  # Frontend сервис (Next.js приложение)
  frontend:
    build:
      context: ./front  # Путь к Dockerfile фронтенда
    environment:
      # Настройки для Next.js в продакшн
      - NODE_ENV=production
      - PORT=3000  # Порт для Next.js сервера
      # - NEXT_PUBLIC_API_URL=  # URL API (закомментирован, используется относительный путь)
    depends_on:
      - backend  # Зависимость от бэкенда
    restart: unless-stopped  # Автоматический перезапуск
    networks:
      - app  # Подключение к внутренней сети

  # Nginx reverse proxy для маршрутизации запросов
  nginx:
    image: nginx:alpine  # Легковесный образ Nginx
    ports:
      - "80:80"  # Проброс 80 порта на хост
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro  # Монтирование конфига (только чтение)
    depends_on:
      - backend   # Зависимость от бэкенда
      - frontend  # Зависимость от фронтенда
    restart: unless-stopped  # Автоматический перезапуск
    networks:
      - app  # Подключение к внутренней сети
    healthcheck:
      # Проверка здоровья через healthz эндпоинт
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1/healthz"]
      interval: 30s    # Интервал проверки
      timeout: 5s      # Таймаут запроса
      retries: 5       # Количество попыток
      start_period: 40s # Время ожидания перед первой проверкой

  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine  # Стабильная версия PostgreSQL
    environment:
      # Настройки базы данных
      POSTGRES_DB: portfolio          # Имя базы данных
      POSTGRES_USER: portfolio_user   # Пользователь БД
      POSTGRES_PASSWORD: portfolio_pass # Пароль БД
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Персистентное хранение данных
    ports:
      - "5432:5432"  # Проброс порта для внешнего доступа (для разработки)
    networks:
      - app  # Подключение к внутренней сети
    healthcheck:
      # Проверка готовности PostgreSQL
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio"]
      interval: 10s  # Частая проверка для быстрого старта
      timeout: 5s    # Таймаут проверки
      retries: 5     # Количество попыток
    restart: unless-stopped  # Автоматический перезапуск

# Определение сетей
networks:
  app: {}  # Внутренняя сеть для связи между контейнерами

# Определение томов для персистентного хранения
volumes:
  postgres_data: {}  # Том для данных PostgreSQL